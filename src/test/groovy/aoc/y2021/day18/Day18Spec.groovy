package aoc.y2021.day18

import aoc.InputReader
import spock.lang.Specification
import spock.lang.Unroll

@Unroll
class Day18Spec extends Specification {
    static def t0 = """[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]
"""
    static def t1 = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
"""

    def "part1 warmup tests"() {
        expect:
        Day18.part1(input) == output

        where:
        input                                                           | output
//        '[1,2]'                                                         | 7
//        '[[1,2],3]'                                                     | 27
//        '[9,[8,7]]'                                                     | 103
//        '[[1,9],[8,5]]'                                                 | 131
//        '[[[[1,2],[3,4]],[[5,6],[7,8]]],9]'                             | 1443
//        '[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]'                     | 1875
//        '[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]' | 2763
//        '[[1,2],[[3,4],5]]'                                             | 143
//        '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'                             | 1384
//        '[[[[1,1],[2,2]],[3,3]],[4,4]]'                                 | 445
//        '[[[[3,0],[5,3]],[4,4]],[5,5]]'                                 | 791
//        '[[[[5,0],[7,4]],[5,5]],[6,6]]'                                 | 1137
//        '[[[[4,3],4],4],[7,[[8,4],9]]]\n[1,1]'                          | 1384
//        '[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]\n[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]' | 0
//        '[1,1]\n[2,2]\n[3,3]\n[4,4]' | 445
//        '[1,1]\n[2,2]\n[3,3]\n[4,4]\n[5,5]' | 791
//        '[1,1]\n[2,2]\n[3,3]\n[4,4]\n[5,5]\n[6,6]' | 1137
        t0                                                              | 3488
//        t1                                                              | 4140
    }

    def "part1 warmup tests 2"() {
        expect:
        new Day18.SnailFish(input1).add(new Day18.SnailFish(input2)).toString() == new Day18.SnailFish(output).toString()

        where:
        input1                                       |input2                    | output
//        '[[[[4,3],4],4],[7,[[8,4],9]]]'|'[1,1]' | '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'
        '[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]'|'[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]' | '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]'
    }

    def "part1"() {
        expect:
        Day18.part1(InputReader.read("y2021/day18")) == 0
    }

    def "part2 warmup tests"() {
        expect:
        Day18.part2(input) == output

        where:
        input | output
        t1    | 0
    }

    def "part2"() {
        expect:
        Day18.part2(InputReader.read("y2021/day18")) == 0
    }
}
